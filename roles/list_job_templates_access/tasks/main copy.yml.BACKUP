---
- name: Retrieve users with Execute & Admin roles on Job Templates
  ansible.builtin.set_fact:
    username_password: "{{ automation_controller_user }}:{{ automation_controller_pass }}"
    resource_update_access_list: []
    user_access_list: []
    job_template_admin_list: []

- name: Get list of controller admin users
  ansible.builtin.uri:
    url: "https://{{ automation_controller_host }}/api/v2/users/"
    method: GET
    body_format: json
    headers:
      Authorization: Basic {{ username_password | string | b64encode }}
      Content-Type: "application/json"
    validate_certs: false
  register: userlist

- name: Set all user Ids (select all userId)
  ansible.builtin.set_fact:
    all_users_id_name: "{{ userlist['json']['results']  | items2dict(key_name='id', value_name='username' )  }}"

- name: Get list of controller  users roles for each user
  ansible.builtin.uri:
    url: "https://{{ automation_controller_host }}/api/v2/users/{{ item.key }}/roles/"
    method: GET
    body_format: json
    headers:
      Authorization: Basic {{ username_password | string | b64encode }}
      Content-Type: "application/json"
    validate_certs: false
  register: user_roles
  with_dict: "{{ all_users_id_name }}"

- name: Display user_roles
  ansible.builtin.debug:
    msg: "{{ user_roles }}"

- name: If user has a role of System Administrator, add to this fact list
  # ansible.builtin.set_fact:
  #   resource_update_access_list: "{{ resource_update_access_list + 
  #                       [ {'UserName': item.item.value,
  #                         'Resource': item.json.results | map(attribute='summary_fields') |
  #                             selectattr('resource_type', 'defined')  |
  #                             selectattr('resource_type','eq', 'job_template') |
  #                             map(attribute='resource_type'),
  #                          'Role' :  item.json.results  |  selectattr('name', 'in', ['Admin','Execute']) |
  #                             map(attribute='name')
  #                         }
  #                       ]
  #                   }}"
  # when:
  #   -  ( (item.json.results  | 
  #           selectattr('name', 'defined') |
  #           selectattr('name','eq', 'Execute') |
  #           map(attribute='name') )
  #         or 
  #         (item.json.results  | 
  #             selectattr('name', 'defined') |
  #             selectattr('name','eq', 'Admin') |
  #             map(attribute='name') )
  #       )
  #       and
  #       (
  #         (item.json.results | map(attribute='summary_fields') | 
  #           selectattr('resource_type', 'defined')  |
  #           selectattr('resource_type','eq', 'job_template')  |
  #           map(attribute='resource_type')  )              
  #       )

  ansible.builtin.set_fact:
    resource_update_access_list: "{{ resource_update_access_list + 
                        [ {'user': item.item.value,
                           'resource_name': item.json.results | map(attribute='summary_fields') |
                               selectattr('resource_name', 'defined')  |  map(attribute='resource_name'),
                           'resource': item.json.results | map(attribute='summary_fields') |
                               selectattr('resource_type', 'defined')  |  map(attribute='resource_type'),
                           'role' : item.json.results  |  map(attribute='name')
                          }
                        ]
                    }}"

  when: ( item.json.results  | 
            selectattr('name', 'in' , ['Admin','Execute'])
        )   
        and 
        ( item.json.results | map(attribute='summary_fields') |
          selectattr('resource_type', 'defined')  |
          selectattr('resource_type','eq', 'job_template') )

  loop: "{{ user_roles['results'] | list }}" 

- name: Display resource_update_access_list
  ansible.builtin.debug:
    msg: "{{ resource_update_access_list }}"

- name: Combine user resource/access to one list
  # ansible.builtin.debug:
  #   msg: |
  #    UserName : "{{ item.UserName }}"
  #    "{{ item.Resource| zip(item.Role) | list }}"
  ansible.builtin.set_fact:
    user_access_list: "{{ user_access_list + 
                        [ 
                          {
                            'user': item.user,
                            'resource': item.resource | zip(item.resource_name) | zip(item.role) | list 
                          }
                        ]
                    }}"
  loop:
    "{{ resource_update_access_list }}"

- name: Display user_access_list
  ansible.builtin.debug:
    msg: "{{ user_access_list }}"



- name: List user JOB TEMPLATE access with Admin/Execute access
  ansible.builtin.debug:
    msg: |
      user:"{{ item.0.user ,item.1 }}}"
  when: 
    - "'job_template' in item.1 "
    - "'Execute' in item.1 or 'Admin' in item.1"
  loop: "{{ user_access_list | subelements('resource')  }}"

  loop_control:
    label: "{{ item.0.user }}"




# - name: List user access with "job_template" and "Admin" access
#   ansible.builtin.debug:
#     msg: |
#       user: "{{ item  }} }"
#   when: 
#   -   ( 'job_template' in item.resource|flatten and 'Admin' in item.resource|flatten )    
#   loop: "{{ user_access_list   }}"

# - name: List user access with "job_template" and "Admin" access
#   ansible.builtin.debug:
#     msg: |
#       "{{ item.user }}: {{ item.access|flatten }} has 'job_template' and 'Admin/Execute' access"
  
#   ansible.builtin.set_fact:
#     job_template_admin_list: "{{ job_template_admin_list + 
#                         [ 
#                           {
#                             'user':  item.user            
#                           }
#                         ]
#                     }}"

#   when: 
#   -   ( 'job_template' in item.access|flatten and 'Admin' in item.access|flatten )    
#   loop: "{{ user_access_list | list }}"


      #          ( 'job_template' in item.access|flatten and 'Execute' in item.access|flatten)

# - name: Display job_template_admin_list
#   ansible.builtin.debug:
#     msg: "{{ job_template_admin_list }}"

# - name: Filter user access
#   set_fact:
#     user_access_filtered: "{{ user_access_list | map(attribute='access') 
#       | flatten(1) | select('1') | select('job_template', 'Admin') | list }}"

# - name: Display user access
#   debug:
#     var: user_access_filtered





